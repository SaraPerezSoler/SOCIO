// automatically generated by Xtext
grammar org.xtext.botGenerator.Bot with org.eclipse.xtext.common.Terminals

import "platform:/resource/botGenerator/Model/BotGenerator.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Bot returns Bot:
	'Chatbot' name=EString 'language:' languages+=Language (','languages+=Language)*
	
		'intents'':' intents+=Intent ( intents+=Intent)*  
		('entities'':'  entities+=Entity (entities+=Entity)*  )?
		('actions' ':' actions+=Action (actions+=Action)*  )?
		'flows'':' ('-'flows+=Transition';')+ ;


Entity returns Entity:
	Simple | Composite;

Action returns Action:
	Text | HTTPRequest | Image | HTTPResponse;

Token returns Token:
	Literal | EntityToken | ParameterToken | ParameterRefenceToken;


EString returns ecore::EString:
	STRING | ID;

Intent returns Intent:
	name=EString (fallbackIntent?='Fallback')? ':'
		(inputs+=IntentLanguageInputs)+
		('parameters:'  parameters+=Parameter ( parameters+=Parameter)* )?
	;
IntentLanguageInputs returns IntentLanguageInputs: 
	'inputs' ('in' language=Language)? '{'  inputs+=TrainingPhrase ( "," inputs+=TrainingPhrase)*'}'
;

Transition returns UserInteraction:
	'user' intent=[Intent|EString]('=>'target=(State|State2))?
;
State returns BotInteraction:
	'chatbot' '('actions+=[Action|EString](','actions+=[Action|EString])*')'('=>'outcoming+=Transition)? 
;
State2 returns BotInteraction:
	'chatbot' '('actions+=[Action|EString](','actions+=[Action|EString])*')''{'
	  ('=>' outcoming+=Transition';')+
	 '}'
;

TrainingPhrase returns TrainingPhrase:
	{TrainingPhrase}
	tokens+=(Literal | ParameterRefenceToken)+;

Parameter returns Parameter:
	 name=EString ':' 
		'entity' (entity=[Entity|EString] | defaultEntity=DefaultEntity) 
		(',' required?='required'
		(','  (prompts+=PromptLanguage)+)?
		)? 
		(','isList?='isList')? ';';
PromptLanguage returns PromptLanguage:
	'prompts'('in' language=Language)?'['prompts+=EString (','prompts+=EString)*']' 
;


Literal returns Literal:
	 text=EString;

EntityToken returns EntityToken:
	'@'entity=[Entity|EString];

ParameterToken returns ParameterToken:
	'['parameter=[Parameter|EString]']';

ParameterRefenceToken returns ParameterReferenceToken:
	'('textReference=EString')''[' parameter=[Parameter|EString]']';
	
HTTPRequestToken returns HTTPRequestToke:
	'request.'type=HTTPReturnType('.'dataKey=EString)?
;
enum DefaultEntity returns DefaultEntity:
	TEXT = 'text' | NUMBER = 'number' | DATE = 'date' | FLOAT = 'float' | TIME = "time";

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Simple returns Simple:
	{Simple}
	'Simple' 'entity' name=EString':'
		(inputs+= SimpleLanguageInput)+	
	;
SimpleLanguageInput returns SimpleLanguageInput: 
	('inputs' 'in' language=Language)? '{'
		(inputs+=SimpleInput (inputs+=SimpleInput)* )
	'}'
;

Composite returns Composite:
	{Composite}
	'Composite''entity' name=EString':'
		(inputs+=CompositeLanguageInput)+
		;
CompositeLanguageInput returns CompositeLanguageInput:  
{CompositeLanguageInput} 
('inputs' 'in' language=Language)? '{'
		(inputs+=CompositeInput ( inputs+=CompositeInput)* )?
	'}'
;


SimpleInput returns SimpleInput:
	{SimpleInput}
	name=EString ('synonyms'  values+=EString ( "," values+=EString)* )? ';';

CompositeInput returns CompositeInput:
	 tokens+=(Literal | EntityToken)+';' ;

Text returns Text:
	'text' 'response' name=EString':'
	(inputs+=TextLanguageInput)+
		 ;
TextLanguageInput returns TextLanguageInput:
	('text'('in' language=Language)?)?'{'inputs+=TextInputText (',' inputs+=TextInputText)* '}'
;

HTTPResponse returns HTTPResponse:
	'HttpResponse' name=EString ':'
		'HttpRequest:' HTTPRequest=[HTTPRequest|EString]';'
		(inputs+=TextLanguageInputHttpResponse)+;
		
HTTPRequest returns HTTPRequest:
	'HTTP''request' method=Method name=EString ':'
		'URL'':' URL=EString ';'
		('basicAuth'':' basicAuth=KeyValue';')?
		('headers' ':' headers+=KeyValue ( "," headers+=KeyValue)* ';')?
		('data' ':' data+=Data ( "," data+=Data)*';'  
		 'dataType' ':' dataType=DataType';')?;
Image returns Image:
	'image' 'response' name=EString':'
		'URL'':' URL=EString
;

TextLanguageInputHttpResponse returns TextLanguageInput:
	'text'('in' language=Language)?'{'inputs+=TextInputHttpResponse (',' inputs+=TextInputHttpResponse)* '}';
	
	
TextInputHttpResponse returns TextInput:
	(tokens+=(Literal|ParameterToken|HTTPRequestToken))+;
	
TextInputText returns TextInput:
	(tokens+=(Literal|ParameterToken))+ ;
	


enum HTTPReturnType returns HTTPReturnType:
	TEXT='text'|STATUS_CODE='status_code'| IMAGE='image'|DATA='data'
;

enum Language returns Language:
	ENGLISH = 'en' | SPANISH = 'es' | DANISH = 'da' | GERMAN = 'de' | FRENCH = 'fr' |
	HINDI = 'hi'| INDONESIAN = 'id' | ITALIAN = 'it' | JAPANESE ='ja' | KOREAN = 'ko'|
	DUTCH ='nl' | NORWEGIAN = 'no' | POLISH = 'pl' | PORTUGUESE = 'pt'| RUSIAN = 'ru'|
	SWEDISH = 'sv'| THAI = 'th' | TURKISH = 'tr' | UKRANIAN = 'uk' | CHINESE = 'zh' | 
	ARABIC = 'ar' | CZECH = 'cz'| BULGARIAN = 'bu' | FINISH = 'fi' | GREEK = 'gr' | BANGLA = 'ba'
	
;
KeyValue returns KeyValue:
	key=EString ':' value=Literal;
    
Data returns KeyValue:
    key=EString ':' value=(Literal|ParameterToken);

enum DataType returns DataType:
	JSON = 'JSON' | FORM = 'FORM';

enum Method returns Method:
	POST = 'post' | GET = 'get';
