Test(Wed May 31 14:14:47 CEST 2017):@ModellingBot #test Package is an element. Packages contains types. Type is abstract. Element is abstract.
	Create-> class Package
	Create-> class Element
	Update-> Old: class Package / New: class Package, superTypes: [Element]
	Update-> Old: class Type / New: abstract class Type
	Create-> class Type
	Create-> reference type
	Update-> Old: reference type [0..-1], type: null, from Package / New: reference type [0..-1], type: Type, from Package
	Update-> Old: class Element / New: abstract class Element

----------------------------
Test(Wed May 31 14:15:46 CEST 2017):@ModellingBot #test class, interface and enumeration are types.
	Create-> class Interface
	Update-> Old: class Interface / New: class Interface, superTypes: [Type]
	Create-> class Enumeration
	Update-> Old: class Enumeration / New: class Enumeration, superTypes: [Type]
	Create-> class Class
	Update-> Old: class Class / New: class Class, superTypes: [Type]

----------------------------
Test(Wed May 31 14:23:34 CEST 2017):@ModellingBot #test all elements contains a name.
	Create-> class Name
	Create-> reference name
	Update-> Old: reference name [0..1], type: null, from Element / New: reference name [0..1], type: Name, from Element

----------------------------
Test(Wed May 31 14:32:45 CEST 2017):@ModellingBot #test add type name. name contains a type name
	Create-> reference typeName
	Update-> Old: reference typeName [0..1], type: null, from Name / New: reference typeName [0..1], type: TypeName, from Name
	Create-> class TypeName

----------------------------
Test(Wed May 31 14:40:38 CEST 2017):@ModellingBot #test Type and Name are elements
	Update-> Old: class Name / New: class Name, superTypes: [Element]
	Update-> Old: abstract class Type / New: abstract class Type, superTypes: [Element]

----------------------------
